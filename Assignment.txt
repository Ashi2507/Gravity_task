Question 1: DSA Given an array of integers, return the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], and its length is 4.
Ans.


function lengthOfLIS(arr) {
    const n = arr.length;
    if (n === 0) return 0;

        let dp = new Array(n).fill(1);
	for (let i = 1; i < n; i++) {
             for (let j = 0; j < i; j++) {
           	 if (arr[i] > arr[j]) {
                 dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }

      return Math.max(...dp);
}

const arr = [10, 9, 2, 5, 3, 7, 101, 18];
console.log(lengthOfLIS(arr));  

// Output: 4


Question 3: MongoDB Aggregation Consider a MongoDB collection named sales with documents structured as follows:

json:

{

"_id": ObjectId("..."),

"date": ISODate("2024-06-15T00:00:00Z"),

"store": "Store A",

"items": [

     {

         "name": "item1",

         "quantity": 5,

         "price": 10.0

     },

     {

         "name": "item2",

         "quantity": 3,

         "price": 20.0

     }

]

}
  ans.  db.sales.aggregate([
    {
    $unwind: "$items"
  },
  
    {
    $addFields: {
      month: {
        $dateToString: { format: "%Y-%m", date: "$date" } // Extract year and month as a string
      },
      revenue: {
        $multiply: ["$items.quantity", "$items.price"] // Calculate revenue per item
      }
    }
  },
  
    {
    $group: {
      _id: {
        store: "$store",
        month: "$month"
      },
      totalRevenue: { $sum: "$revenue" }, // Sum of revenue for the store per month
      averagePrice: { $avg: "$items.price" } // Average price of items sold
    }
  },
  
   {
    $project: {
      _id: 0,
      store: "$_id.store",
      month: "$_id.month",
      totalRevenue: 1,
      averagePrice: 1
    }
  },
  
  
  {
    $sort: {
      store: 1,
      month: 1
    }
  }
])


o/p   [
  {
    "store": "Store A",
    "month": "2024-06",
    "totalRevenue": 230.0,
    "averagePrice": 15.0
  },
  {
    "store": "Store B",
    "month": "2024-06",
    "totalRevenue": 150.0,
    "averagePrice": 12.5
  }
]


Question 4: React Build a Dynamic To-Do List Application in React.

Objective:

Create a React application that allows users to manage a to-do list with the following features:

Add new tasks
Mark tasks as complete
Delete tasks
Filter tasks by all, completed, and pending
Persist tasks in the local storage so that they are retained after a page refresh
Requirements:

UI Components:
Create a TodoApp component as the main component.
Create a TodoList component to display the list of tasks.
Create a TodoItem component to represent each task.
Create an AddTodo component for adding new tasks.
Create a Filter component to filter tasks.

State Management:
Use the useState and useEffect hooks for state management.
Use local storage to persist the tasks.

Functionality:
Add a new task with a text input.
Mark a task as complete/incomplete by clicking on it.
Delete a task.
Filter tasks by all, completed, and pending.
Persist tasks in local storage.

PS - You may use this API for the todo app - https://dummyjson.com/docs/todos#todos-a

Ans.
     

project in task-todo folder 

